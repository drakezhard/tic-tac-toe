;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name om-bootstrap.util, :imports nil, :requires {gobject goog.object, goog.object goog.object, om om.core, om.core om.core, s schema.core, schema.core schema.core}, :uses nil, :defs {get-props {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 34, :column 7, :end-line 34, :end-column 16, :arglists (quote ([x])), :doc "This is the same as om.core/get-props. We added it to get around\n  the new precondition in Om 0.8.0."}, :name om-bootstrap.util/get-props, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "This is the same as om.core/get-props. We added it to get around\n  the new precondition in Om 0.8.0."}, chain-fns {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 68, :column 7, :end-line 68, :end-column 16, :arglists (quote ([l r])), :doc "Generates a new function that calls each supplied side-effecting\n  function."}, :name om-bootstrap.util/chain-fns, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 16, :method-params ([l r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l r])), :doc "Generates a new function that calls each supplied side-effecting\n  function."}, merge-props {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 96, :column 7, :end-line 96, :end-column 18, :arglists (quote ([& prop-maps])), :doc "Merges two maps that represent React properties. Merges occur\n  according to the functions defined in `react-merges`.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(prop-maps)], :arglists ([& prop-maps]), :arglists-meta (nil)}}, :name om-bootstrap.util/merge-props, :variadic true, :file "out/om_bootstrap/util.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(prop-maps)], :arglists ([& prop-maps]), :arglists-meta (nil)}, :method-params [(prop-maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 0, :fn-var true, :arglists ([& prop-maps]), :doc "Merges two maps that represent React properties. Merges occur\n  according to the functions defined in `react-merges`."}, copy-js {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 113, :column 7, :end-line 113, :end-column 14, :arglists (quote ([arr])), :doc "Returns a basic, shallow copy of the supplied JS object."}, :name om-bootstrap.util/copy-js, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 14, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr])), :doc "Returns a basic, shallow copy of the supplied JS object."}, collectify {:schema (schema.core/make-fn-schema output-schema21747 [input-schema21748]), :protocol-inline nil, :meta {:arglists (quote ([x])), :file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 26, :column 9, :end-line 26, :end-column 19, :schema (schema.core/make-fn-schema output-schema21747 [input-schema21748]), :doc "Inputs: [x :- s/Any]\n  Returns: [s/Any]", :raw-arglists (quote ([x :- s/Any]))}, :name om-bootstrap.util/collectify, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 19, :method-params ([G__21751]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([x :- s/Any])), :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Inputs: [x :- s/Any]\n  Returns: [s/Any]"}, om-component? {:schema (schema.core/make-fn-schema output-schema21762 [input-schema21763]), :protocol-inline nil, :meta {:arglists (quote ([x])), :file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 40, :column 9, :end-line 40, :end-column 22, :schema (schema.core/make-fn-schema output-schema21762 [input-schema21763]), :doc "Inputs: [x]\n  Returns: s/Bool", :raw-arglists (quote ([x]))}, :name om-bootstrap.util/om-component?, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 22, :method-params ([G__21766]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([x])), :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Inputs: [x]\n  Returns: s/Bool"}, clone-basic-react {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 144, :column 7, :end-line 144, :end-column 24, :arglists (quote ([child extra-props])), :doc "This function is called if the React component child was NOT\n  generated by Om. Merges the supplied properties into the -props\n  field of the supplied React component and creates a shallow copy."}, :name om-bootstrap.util/clone-basic-react, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 24, :method-params ([child extra-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child extra-props])), :doc "This function is called if the React component child was NOT\n  generated by Om. Merges the supplied properties into the -props\n  field of the supplied React component and creates a shallow copy."}, valid-component? {:schema (schema.core/make-fn-schema output-schema21792 [input-schema21793]), :protocol-inline nil, :meta {:arglists (quote ([child])), :file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 50, :column 9, :end-line 50, :end-column 25, :schema (schema.core/make-fn-schema output-schema21792 [input-schema21793]), :doc "Inputs: [child]\n  Returns: s/Bool\n\n  Returns true if the supplied argument is a valid React component,\n  false otherwise.", :raw-arglists (quote ([child]))}, :name om-bootstrap.util/valid-component?, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 25, :method-params ([G__21796]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([child])), :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([child])), :doc "Inputs: [child]\n  Returns: s/Bool\n\n  Returns true if the supplied argument is a valid React component,\n  false otherwise."}, clone-with-props {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 157, :column 7, :end-line 157, :end-column 23, :arglists (quote ([child] [child extra-props])), :doc "Returns a shallow copy of the supplied component (child); the copy\n  will have any props provided by extra-props merged in. Props are\n  merged in the same manner as merge-props, so props like :class will\n  be merged intelligently.\n\n  extra-props can be a function of the old props that returns new\n  props, OR it can be a map of props.\n\n  If the supplied child is an Om component, any supplied extra\n  properties will be merged into the underlying cursor and accessible\n  in the Om constructor.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([child] [child extra-props]), :arglists ([child] [child extra-props]), :arglists-meta (nil nil)}}, :name om-bootstrap.util/clone-with-props, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([child] [child extra-props]), :arglists ([child] [child extra-props]), :arglists-meta (nil nil)}, :method-params ([child] [child extra-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists ([child] [child extra-props]), :doc "Returns a shallow copy of the supplied component (child); the copy\n  will have any props provided by extra-props merged in. Props are\n  merged in the same manner as merge-props, so props like :class will\n  be merged intelligently.\n\n  extra-props can be a function of the old props that returns new\n  props, OR it can be a map of props.\n\n  If the supplied child is an Om component, any supplied extra\n  properties will be merged into the underlying cursor and accessible\n  in the Om constructor."}, react-merges {:name om-bootstrap.util/react-merges, :file "out/om_bootstrap/util.cljs", :line 78, :column 1, :end-line 78, :end-column 18, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 78, :column 6, :end-line 78, :end-column 18}, :doc "Map of React keyword to a custom function for its merge. Tries to\n  do a decent job with event handlers as well; currently only\n  handles :on-select :on-click, :on-blur, kebab-cased as om-tools\n  prefers."}, some-valid-component? {:schema (schema.core/make-fn-schema output-schema21807 [input-schema21808]), :protocol-inline nil, :meta {:arglists (quote ([children])), :file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 58, :column 9, :end-line 58, :end-column 30, :schema (schema.core/make-fn-schema output-schema21807 [input-schema21808]), :doc "Inputs: [children]\n  Returns: s/Bool\n\n  Returns true if the supplied sequence contains some valid React component,\n  false otherwise.", :raw-arglists (quote ([children]))}, :name om-bootstrap.util/some-valid-component?, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 30, :method-params ([G__21811]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([children])), :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([children])), :doc "Inputs: [children]\n  Returns: s/Bool\n\n  Returns true if the supplied sequence contains some valid React component,\n  false otherwise."}, strict-valid-component? {:schema (schema.core/make-fn-schema output-schema21777 [input-schema21778]), :protocol-inline nil, :meta {:arglists (quote ([child])), :file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 44, :column 9, :end-line 44, :end-column 32, :schema (schema.core/make-fn-schema output-schema21777 [input-schema21778]), :doc "Inputs: [child]\n  Returns: s/Bool\n\n  TODO: Once Om updates its externs to include this file, we can\n  remove the janky aget call.", :raw-arglists (quote ([child]))}, :name om-bootstrap.util/strict-valid-component?, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 32, :method-params ([G__21781]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([child])), :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([child])), :doc "Inputs: [child]\n  Returns: s/Bool\n\n  TODO: Once Om updates its externs to include this file, we can\n  remove the janky aget call."}, merge-with-fns {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([k->fn maps])), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by looking up the proper merge function and in the\n  supplied map of key -> merge-fn and using that for the big merge. If\n  a key doesn't have a merge function, the right value wins (as with\n  merge)."}, :name om-bootstrap.util/merge-with-fns, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 21, :method-params ([k->fn maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k->fn maps])), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by looking up the proper merge function and in the\n  supplied map of key -> merge-fn and using that for the big merge. If\n  a key doesn't have a merge function, the right value wins (as with\n  merge)."}, clone-om {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 127, :column 7, :end-line 127, :end-column 15, :arglists (quote ([child extra-props])), :doc "Merges the supplied extra properties into the underlying Om cursor\n  and calls the constructor to clone the React component.\n\n  Requires that the supplied child has an Om cursor attached to it! "}, :name om-bootstrap.util/clone-om, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 15, :method-params ([child extra-props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child extra-props])), :doc "Merges the supplied extra properties into the underlying Om cursor\n  and calls the constructor to clone the React component.\n\n  Requires that the supplied child has an Om cursor attached to it! "}, create-element {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/util.cljs", :line 122, :column 7, :end-line 122, :end-column 21, :arglists (quote ([child] [child props])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([child] [child props]), :arglists ([child] [child props]), :arglists-meta (nil nil)}}, :name om-bootstrap.util/create-element, :variadic false, :file "out/om_bootstrap/util.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([child] [child props]), :arglists ([child] [child props]), :arglists-meta (nil nil)}, :method-params ([child] [child props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists ([child] [child props])}}, :require-macros {om om.core, om.core om.core, s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{x child schema.core/Any :schema :children :schema.core/error :key :else :ref children :value collectify :on-blur :type om-component? :on-click :className :style s/Bool valid-component? :on-select :class some-valid-component? strict-valid-component? :error :doc :keywordize-keys s/Any}, :order [x :schema s/Any collectify :type :value :error :schema.core/error schema.core/Any om-component? s/Bool child strict-valid-component? :doc valid-component? children some-valid-component? :children :key :ref :on-blur :on-click :className :style :on-select :class :keywordize-keys :else]}, :doc "Utilities for the om-bootstrap library."}