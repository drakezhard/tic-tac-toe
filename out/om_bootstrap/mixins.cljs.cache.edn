;; Analyzed by ClojureScript 1.7.170
{:use-macros {defmixin om-tools.mixin}, :excludes #{}, :name om-bootstrap.mixins, :imports nil, :requires {a cljs.core.async, cljs.core.async cljs.core.async, om om.core, om.core om.core, om-tools.mixin om-tools.mixin, s schema.core, schema.core schema.core}, :uses {put! cljs.core.async}, :defs {event-listener {:schema (schema.core/make-fn-schema output-schema26228 [input-schema26229]), :protocol-inline nil, :meta {:arglists (quote ([target event-type callback])), :file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 9, :column 9, :end-line 9, :end-column 23, :schema (schema.core/make-fn-schema output-schema26228 [input-schema26229]), :doc "Inputs: [target :- s/Any event-type :- s/Str callback :- (s/=> s/Any s/Any)]\n  Returns: (s/=> s/Any)\n\n  Registers the callback on the supplied target for events of type\n   `event-type`. Returns a function of no arguments that, when called,\n   unregisters the callback.", :raw-arglists (quote ([target :- s/Any event-type :- s/Str callback :- (s/=> s/Any s/Any)]))}, :name om-bootstrap.mixins/event-listener, :variadic false, :file "out/om_bootstrap/mixins.cljs", :end-column 23, :method-params ([G__26232 G__26233 G__26234]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([target :- s/Any event-type :- s/Str callback :- (s/=> s/Any s/Any)])), :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([target event-type callback])), :doc "Inputs: [target :- s/Any event-type :- s/Str callback :- (s/=> s/Any s/Any)]\n  Returns: (s/=> s/Any)\n\n  Registers the callback on the supplied target for events of type\n   `event-type`. Returns a function of no arguments that, when called,\n   unregisters the callback."}, set-listener-mixin {:name om-bootstrap.mixins/set-listener-mixin, :file "out/om_bootstrap/mixins.cljs", :line 26, :column 1, :end-line 26, :end-column 29, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 26, :column 11, :end-line 26, :end-column 29}, :doc "Handles a sequence of listeners for the component, and removes them\n   from the document when the component is unmounted."}, set-timeout-mixin {:name om-bootstrap.mixins/set-timeout-mixin, :file "out/om_bootstrap/mixins.cljs", :line 38, :column 1, :end-line 38, :end-column 28, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 38, :column 11, :end-line 38, :end-column 28}, :doc "Handles a sequence of timeouts for the component, and removes them\n   from the document when the component is unmounted."}, in-root? {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 50, :column 7, :end-line 50, :end-column 15, :arglists (quote ([node root])), :doc "Accepts two DOM elements; returns true if the supplied node is\n  nested inside the supplied root, false otherwise."}, :name om-bootstrap.mixins/in-root?, :variadic false, :file "out/om_bootstrap/mixins.cljs", :end-column 15, :method-params ([node root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node root])), :doc "Accepts two DOM elements; returns true if the supplied node is\n  nested inside the supplied root, false otherwise."}, ESCAPE_KEY {:name om-bootstrap.mixins/ESCAPE_KEY, :file "out/om_bootstrap/mixins.cljs", :line 59, :column 1, :end-line 59, :end-column 16, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 59, :column 6, :end-line 59, :end-column 16}}, bind-root-close-handlers! {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 61, :column 7, :end-line 61, :end-column 32, :arglists (quote ([owner])), :doc "For dropdowns, binds a handler for that sets the dropdown-mixin's\n  `:open?` state to false if the user clicks outside the owning\n  component OR hits the escape key."}, :name om-bootstrap.mixins/bind-root-close-handlers!, :variadic false, :file "out/om_bootstrap/mixins.cljs", :end-column 32, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "For dropdowns, binds a handler for that sets the dropdown-mixin's\n  `:open?` state to false if the user clicks outside the owning\n  component OR hits the escape key."}, unbind-root-close-handlers! {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 80, :column 7, :end-line 80, :end-column 34, :arglists (quote ([owner])), :doc "If they're present on the owning object, removes the listeners\n  registered by the dropdown mixin."}, :name om-bootstrap.mixins/unbind-root-close-handlers!, :variadic false, :file "out/om_bootstrap/mixins.cljs", :end-column 34, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "If they're present on the owning object, removes the listeners\n  registered by the dropdown mixin."}, dropdown-mixin {:name om-bootstrap.mixins/dropdown-mixin, :file "out/om_bootstrap/mixins.cljs", :line 89, :column 1, :end-line 89, :end-column 25, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 89, :column 11, :end-line 89, :end-column 25}, :doc "Mixin that manages a single piece of state - :open?. If a user\n  clicks outside the component's owning dom element OR hits the escape\n  key, the state will jump back to false.\n\n  Down the road this may need to register a callback when the state\n  changes."}, collapsible-mixin {:name om-bootstrap.mixins/collapsible-mixin, :file "out/om_bootstrap/mixins.cljs", :line 109, :column 1, :end-line 109, :end-column 28, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_bootstrap/mixins.cljs", :line 109, :column 11, :end-line 109, :end-column 28}, :doc "Mixin that enables collapsible Panels. Similar to the Dropdown\n   Mixin it only manages a single piece of state - :collapsed?. The Panel\n   is opened and closen by clicking on the header."}}, :require-macros {om om.core, om.core om.core, om-tools.mixin om-tools.mixin, s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{target :schema s/Str callback s/=> :schema.core/error event-type :else :value :type event-listener :open? :error arg0 :doc :collapsed? s/Any}, :order [target :schema s/Any event-type s/Str arg0 callback s/=> event-listener :doc :type :value :error :schema.core/error :else :open? :collapsed?]}, :doc nil}