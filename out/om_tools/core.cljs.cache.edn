;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name om-tools.core, :imports nil, :requires {om om.core, om.core om.core, plumbing.fnk.schema plumbing.fnk.schema, p plumbing.core, plumbing.core plumbing.core, s schema.core, schema.core schema.core}, :uses nil, :defs {state-proxy {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_tools/core.cljs", :line 148, :column 7, :end-line 148, :end-column 18, :arglists (quote ([owner])), :doc "Returns an atom-like object for reading and writing Om component\n   state.\n\n   Note: Behavior may exactly not match atoms when deref'ing\n   immediately following a reset!/swap! because Om processes state\n   changes asynchronously in separate render phases."}, :name om-tools.core/state-proxy, :variadic false, :file "out/om_tools/core.cljs", :end-column 18, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "Returns an atom-like object for reading and writing Om component\n   state.\n\n   Note: Behavior may exactly not match atoms when deref'ing\n   immediately following a reset!/swap! because Om processes state\n   changes asynchronously in separate render phases."}, t_om_tools$core29184 {:num-fields 4, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name om-tools.core/t_om_tools$core29184, :file "out/om_tools/core.cljs", :type true, :anonymous true, :column 7, :line 158, :record false, :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, ->t_om_tools$core29184 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([state-proxy owner get-state meta29185])), :file nil}, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name om-tools.core/->t_om_tools$core29184, :variadic false, :file "out/om_tools/core.cljs", :method-params ([state-proxy owner get-state meta29185]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 7, :factory :positional, :line 158, :max-fixed-arity 4, :fn-var true, :arglists (quote ([state-proxy owner get-state meta29185])), :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, t_om_tools$core29187 {:num-fields 4, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name om-tools.core/t_om_tools$core29187, :file "out/om_tools/core.cljs", :type true, :anonymous true, :column 7, :line 158, :record false, :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, ->t_om_tools$core29187 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([state-proxy owner get-state meta29188])), :file nil}, :protocols #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name om-tools.core/->t_om_tools$core29187, :variadic false, :file "out/om_tools/core.cljs", :method-params ([state-proxy owner get-state meta29188]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 7, :factory :positional, :line 158, :max-fixed-arity 4, :fn-var true, :arglists (quote ([state-proxy owner get-state meta29188])), :skip-protocol-flag #{cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, set-state?! {:protocol-inline nil, :meta {:file "/Users/drakezhard/Development/Projects/tic-tac-toe/out/om_tools/core.cljs", :line 335, :column 7, :end-line 335, :end-column 18, :arglists (quote ([owner v] [owner korks v])), :doc "Calls om.core/set-state! when current value not= to v and returns\n   updated owner, otherwise nil.\n   Used to prevent no-op updates from entering render queue", :added "0.2.0", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}}, :added "0.2.0", :name om-tools.core/set-state?!, :variadic false, :file "out/om_tools/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([owner v] [owner korks v]), :arglists ([owner v] [owner korks v]), :arglists-meta (nil nil)}, :method-params ([owner v] [owner korks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 3, :fn-var true, :arglists ([owner v] [owner korks v]), :doc "Calls om.core/set-state! when current value not= to v and returns\n   updated owner, otherwise nil.\n   Used to prevent no-op updates from entering render queue"}}, :require-macros {om om.core, om.core om.core, plumbing.fnk.schema plumbing.fnk.schema, p plumbing.core, plumbing.core plumbing.core, s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{owner meta29188 get-state quote meta29185 :arglists :doc state-proxy}, :order [state-proxy :arglists :doc quote owner get-state meta29185 meta29188]}, :doc "Tools for Om"}